<?

namespace VKBot;

require_once('command_custom.php');

/**
 * –ö–ª–∞—Å—Å –∑–∞–ø—Ä–æ—Å–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 */
class CommandStorage extends CommandCustom
{
    protected function validate(Message $message)
    {
        if (preg_match('/^—Ö–æ—á—É —Å–∫–ª–∞–¥$/ui', $message->text, $tmpMatched))
            return $tmpMatched;
        else
            return false;
    }

    protected function work(Message $message, $data)
    {
        $tmpParams = $this->database->getParams($this->transport->getOwnerId());
        if (!$tmpParams) {
            $tmpParams = [];
            $tmpData = '–°–∫–ª–∞–¥ –ø—É—Å—Ç–æ–π :(';
        } else {
            ksort($tmpParams);
            $tmpData = '';
        }
        // –ø–µ—Ä–µ–±–µ—Ä–µ–º —Å–∫–ª–∞–¥
        foreach ($tmpParams as $tmpKey => $tmpValue) {
            // –ü—Ä–æ–ø—É—Å—Ç–∏–º –ø—É—Å—Ç—ã–µ
            if ($tmpValue <= 0)
                continue;
            // –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞—à –ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç
            $tmpItem = $this->findItem($tmpKey);
            if ($tmpItem)
                $tmpData .= 'üõí' . ucfirst($tmpItem->id) . ': ' . $tmpValue . ' –ø–æ ' . $tmpItem->cost . ' (' . $tmpItem->short . ')' . PHP_EOL;
            else
                $tmpData .= 'üõí' . ucfirst($tmpKey). ': ' . $tmpValue . ' –±–µ–∑ —Ü–µ–Ω—ã' . PHP_EOL;
        }
        $this->transport->writeChat($tmpData, $message, false);
        return true;
    }
}