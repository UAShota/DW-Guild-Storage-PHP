<?

namespace VKBot;

require_once('command_custom.php');

/**
 * –ö–ª–∞—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π "—Ö–æ—á—É [N] –∞–¥—Å–∫–∏–π –≥—Ä–∏–±"
 */
class CommandGetItem extends CommandCustom
{
    /*
     * –î–æ—Å—Ç—É–ø–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏
     */
    protected const CREDIT = 5000;

    protected function validate(Message $message)
    {
        if (preg_match('/^—Ö–æ—á—É (\d+)?(\D+)$/ui', $message->text, $tmpMatched))
            return $tmpMatched;
        else
            return false;
    }

    protected function work(Message $message, $data)
    {
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        $tmpCount = $data[1] ? $data[1] : 1;
        $tmpType = strtolower(trim($data[2]));
        $tmpItem = $this->findItem($tmpType);
        $tmpType = $tmpItem ? $tmpItem->id : $tmpType;
        $tmpIsGold = $tmpType == self::GOLD;
        // –ü–æ—Å–º–æ—Ç—Ä–∏–º —Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å–∞ –µ—Å—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if ($tmpIsGold)
            $tmpHave = $this->database->getInt($message->user_id, $tmpType);
        else
            $tmpHave = $this->database->getInt($this->transport->getOwnerId(), $tmpType);
        // –û–ø—Ä–µ–¥–µ–ª–∏–º –º–∏–Ω–∏–º—É–º —Ç–æ–≤–∞—Ä–∞
        $tmpCount = min($tmpCount, $tmpHave);
        // –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç
        if (($tmpCount == 0) || ($tmpIsGold && $tmpCount < 100)) {
            if ($tmpIsGold)
                $this->transport->writeChat($this->getAccountTag($message->user_id, $message->name) . ', –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞', $message, false);
            else
                $this->transport->writeChat('üëù ' . $tmpType . ' –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', $message, false);
            return true;
        }
        // –¢–æ–≤–∞—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π
        if (!$tmpItem) {
            if ($tmpIsGold)
                $this->transport->writeChat('–ü–µ—Ä–µ–¥–∞—Ç—å ' . $tmpCount . ' ' . $tmpType, $message, true);
            else
                $this->transport->writeChat('–ü–µ—Ä–µ–¥–∞—Ç—å ' . $tmpType . ' - ' . $tmpCount . ' —à—Ç—É–∫', $message, true);
            return true;
        }
        // –¢–æ–≤–∞—Ä –ø–ª–∞—Ç–Ω—ã–π
        $tmpHave = $this->database->getInt($message->user_id, self::GOLD);
        $tmpCost = $tmpCount * $tmpItem->cost;
        if ($tmpCost > $tmpHave + self::CREDIT) {
            $this->transport->writeChat($this->getAccountTag($message->user_id, $message->name) .
                ', –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ üåï' . $tmpHave . ' –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ' . $tmpCount . ' ' . $tmpItem->id
                . ' –∑–∞ üåï' . $tmpCost . ' (' . $tmpItem->cost . ' –∑–∞ —à—Ç)', $message, false);
            return true;
        }
        // –ö—É–ø–∏–º –ø—Ä–µ–¥–º–µ—Ç
        $this->transport->writeChat('–ü–µ—Ä–µ–¥–∞—Ç—å ' . $tmpItem->id . ' - ' . $tmpCount . ' —à—Ç—É–∫', $message, true);
        return true;
    }
}