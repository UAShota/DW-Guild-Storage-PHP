<?

namespace VKBot;

require_once('command_custom.php');

/**
 * –ö–ª–∞—Å—Å –∑–∞–ø—Ä–æ—Å–∞ –±–∞—Ñ–∞ –∫–æ–º–∞–Ω–¥–æ–π "–•–æ—á—É –±–∞—Ñ [N]"
 */
class CommandGetBaf extends CommandCustom
{
    /*
     * –≠–∫—à–µ–Ω –¥–µ–π—Å—Ç–≤–∏—è
     */
    protected const CMD_ACTION = 'action';

    /*
     * –≠–∫—à–µ–Ω –±–∞—Ñ–∞
     */
    protected const CMD_BAF = 'baf';

    /*
     * –≠–∫—à–µ–Ω –æ–ø–ª–∞—Ç—ã
     */
    protected const CMD_PAY = 'pay';

    /*
     * –¶–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
     */
    protected const BAF_COST = 300;

    /*
     * –î–æ—Å—Ç—É–ø–Ω—ã–π –∫—Ä–µ–¥–∏—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏
     */
    protected const CREDIT = 5000;

    /*
     * –ù–∞–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –±–∞—Ñ–∞
     */
    protected function useBaf(Message $message, $data)
    {
        $tmpHave = $this->database->getInt($message->user_id, self::GOLD);
        if (self::BAF_COST > $tmpHave + self::CREDIT)
            $this->transport->writeChat($this->getAccountTag($message->user_id, $message->name) . ', –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞', $message, false);
        else
            $this->transport->writeChat('–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ ' . $data[1], $message, true);
        return true;
    }

    /*
     * –°–±–æ—Ä –æ–ø–ª–∞—Ç—ã
     */
    protected function usePay(Message $message, $data)
    {
        // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ—Ç–ø–∏—Å–∞–ª —Å–∞–º —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å
        if ($message->user_id != self::DW_ID)
            return false;
        // –°–º–µ–Ω–∏–º –±–∞–ª–∞–Ω—Å
        $tmpHave = $this->database->getInt($data[1], self::GOLD);
        $this->database->setParam($data[1], self::GOLD, $tmpHave - self::BAF_COST);
        // –£–≤–µ–¥–æ–º–∏–º
        $this->transport->writeChat($this->getAccountTag($data[1], $data[2])
            . ", –í–∞—à –±–∞–ª–∞–Ω—Å: üåï" . $this->database->getInt($data[1], self::GOLD), $message, false);
        return true;
    }

    protected function validate(Message $message)
    {
        // –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ—Å—å–±—É –±–∞—Ñ–∞
        if (preg_match('/^—Ö–æ—á—É –±–∞—Ñ (.+)/ui', $message->text, $tmpMatched)) {
            $tmpMatched[self::CMD_ACTION] = self::CMD_BAF;
            return $tmpMatched;
        }
        // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –±–∞—Ñ–∞
        if (preg_match('/^‚ú®\[id(\d+)\|(.+?)], –Ω–∞ –í–∞—Å –Ω–∞–ª–æ–∂–µ–Ω–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ /', $message->text, $tmpMatched)) {
            $tmpMatched[self::CMD_ACTION] = self::CMD_PAY;
            return $tmpMatched;
        }
        // –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        return false;
    }

    protected function work(Message $message, $data)
    {
        if ($data[self::CMD_ACTION] == self::CMD_BAF)
            return $this->useBaf($message, $data);
        if ($data[self::CMD_ACTION] == self::CMD_PAY)
            return $this->usePay($message, $data);
        // –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        return false;
    }
}